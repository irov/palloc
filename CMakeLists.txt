cmake_minimum_required(VERSION 3.10)

OPTION(PALLOC_CONFIG "PALLOC_CONFIG" OFF)
OPTION(PALLOC_SUFFIX "PALLOC_SUFFIX" OFF)
OPTION(PALLOC_THREAD "PALLOC_THREAD" OFF)
OPTION(PALLOC_LOCKFREE "PALLOC_LOCKFREE" OFF)
OPTION(PALLOC_MUTEX "PALLOC_MUTEX" OFF)
OPTION(PALLOC_SANITIZE "PALLOC_SANITIZE" OFF)
OPTION(PALLOC_TEST "PALLOC_TEST" OFF)

set(PALLOC_CONFIG_PATH "" CACHE STRING "PALLOC_CONFIG_PATH")
set(PALLOC_SUFFIX_NAME "" CACHE STRING "PALLOC_SUFFIX_NAME")

set(PALLOC_PROJECT_NAME palloc${PALLOC_SUFFIX_NAME})

PROJECT(${PALLOC_PROJECT_NAME} LANGUAGES C)

MESSAGE("PALLOC_CONFIG: ${PALLOC_CONFIG}")
MESSAGE("PALLOC_SUFFIX: ${PALLOC_SUFFIX}")
MESSAGE("PALLOC_THREAD: ${PALLOC_THREAD}")
MESSAGE("PALLOC_LOCKFREE: ${PALLOC_LOCKFREE}")
MESSAGE("PALLOC_MUTEX: ${PALLOC_MUTEX}")
MESSAGE("PALLOC_SANITIZE: ${PALLOC_SANITIZE}")
MESSAGE("PALLOC_TEST: ${PALLOC_TEST}")

if(PALLOC_CONFIG)
    MESSAGE("PALLOC_CONFIG_PATH: ${PALLOC_CONFIG_PATH}")
endif()

if(PALLOC_SUFFIX)
    MESSAGE("PALLOC_SUFFIX_NAME: ${PALLOC_SUFFIX_NAME}")
endif()

if(PALLOC_SANITIZE)
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /fsanitize=address")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /fsanitize=address")
endif()

MACRO(PALLOC_ADD_FILTER group_name)
    SOURCE_GROUP(${group_name} FILES ${ARGN})
    SET(PALLOC_SOURCE_FILES ${HUMMINGBIRD_SOURCE_FILES} ${ARGN})
ENDMACRO()

PALLOC_ADD_FILTER(
src
    include/palloc/palloc.h
    src/palloc.c
)

if(PALLOC_CONFIG)
    add_definitions(-DPALLOC_CONFIG=\"${PALLOC_CONFIG_PATH}\")
endif()

if(PALLOC_THREAD)
    add_definitions(-DPALLOC_THREAD)
endif()

if(PALLOC_LOCKFREE)
    add_definitions(-DPALLOC_LOCKFREE)
endif()

if(PALLOC_MUTEX)
    add_definitions(-DPALLOC_MUTEX)
endif()

if(PALLOC_SUFFIX)
    add_definitions(-DPALLOC_SUFFIX=${PALLOC_SUFFIX_NAME})
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

ADD_LIBRARY(${PROJECT_NAME} STATIC ${PALLOC_SOURCE_FILES})
    
set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)
set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ${PALLOC_PROJECT_NAME})

macro(ADD_PALLOC_TEST testname)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
    
    ADD_EXECUTABLE(test_${PALLOC_PROJECT_NAME}_${testname} tests/test_${testname}.c)
    
    set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)
    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER tests)
    
    TARGET_LINK_LIBRARIES(test_${PALLOC_PROJECT_NAME}_${testname} ${PALLOC_PROJECT_NAME})

    set_target_properties(test_${PALLOC_PROJECT_NAME}_${testname} PROPERTIES
        FOLDER tests
    )
    
    if(PALLOC_TEST)
        ADD_TEST(NAME ${testname} COMMAND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/test_${PALLOC_PROJECT_NAME}_${testname})
    endif()
endmacro()

if(PALLOC_TEST)
    include(CTest)
    enable_testing()
endif()

ADD_PALLOC_TEST(fuzz)